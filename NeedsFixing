*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package messenger;

/**
 *
 * @author James
 */

import java.security.spec.KeySpec;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.KeyGenerator;
import javax.crypto.KeyGeneratorSpi;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;

import org.apache.commons.codec.binary.Base64;

public class TripleDES {

    private static final String UNICODE_FORMAT = "UTF8";
    public static final String DES_ENCRYPTION_SCHEME = "DES/CBC/PKCS5Padding";
    private KeySpec ks;
    //private SecretKeyFactory skf;
    private KeyGenerator keyGen;
    private Cipher cipher;
   // private IvParameterSpec iv;
    byte[] arrayBytes;
    private String myEncryptionKey;
    private String myEncryptionScheme;
    SecretKey key;

    public TripleDES() throws Exception {
        
        //iv = new IvParameterSpec()
        
        myEncryptionKey = "ThisisSparta";
        myEncryptionScheme = DES_ENCRYPTION_SCHEME;
        arrayBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);
        
        ks = new DESKeySpec(arrayBytes);
        //skf = SecretKeyFactory.getInstance(myEncryptionScheme);
        keyGen = KeyGenerator.getInstance("DES");
        //keyGen.init(56);
       cipher = Cipher.getInstance(myEncryptionScheme);
       //cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");t
        //key = skf.generateSecret(ks);
        key = keyGen.generateKey();
        
        
    }
    public void TripleDes(String nKey) throws Exception {
        //Make sure that key is 24 bytes long, might have to fill in the rest with
        //blank characters
        myEncryptionKey = nKey;
        myEncryptionScheme = DES_ENCRYPTION_SCHEME;
        arrayBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);
        ks = new DESKeySpec(arrayBytes);
       // skf = SecretKeyFactory.getInstance(myEncryptionScheme);
       keyGen = KeyGenerator.getInstance("DES");
      // keyGen.init(56);
        cipher = Cipher.getInstance(myEncryptionScheme);
       //cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");
        //key = skf.generateSecret(ks);
        key = keyGen.generateKey();
    }

    public String encrypt(String unencryptedString) {
        String encryptedString = null;
        try {
            cipher.init(Cipher.ENCRYPT_MODE, key);
            byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);
            byte[] encryptedText = cipher.doFinal(plainText);
            encryptedString = new String(Base64.encodeBase64(encryptedText));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return encryptedString;
    }


    public String decrypt(String encryptedString) {
        String decryptedText=encryptedString;
        try {
            cipher.init(Cipher.DECRYPT_MODE, key, cipher.getParameters());
            byte[] encryptedText = Base64.decodeBase64(encryptedString);
            byte[] plainText = cipher.doFinal(encryptedText);
            decryptedText= new String(plainText);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return decryptedText;
    }

/*
    public static void main(String args []) throws Exception
    {
        TripleDES td = new TripleDES();

        //String stringKey = Base64.encodeToString(key.getEncoded(), Base64.DEFAULT);

        String target="More random text";
        String encrypted=td.encrypt(target);
        String decrypted=td.decrypt(encrypted);
        
        //Might have to convert to byte[] to return key back from string
        //toString does not output the right key...
        //String key = td.key.toString();

        //System.out.println("Key" + key);
        System.out.println("String To Encrypt: "+ target);
        System.out.println("Encrypted String: " + encrypted);
        System.out.println("Decrypted String: " + decrypted);

    }
*/
}
