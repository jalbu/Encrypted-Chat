import java.net.*;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.security.MessageDigest;

public class client extends javax.swing.JFrame {
    
    //initialization/declaration of variables used 
    String user;
    String password = "";
    ArrayList<String> userList = new ArrayList();
    int port = 2729;
    Boolean connected = false;
   
    TripleDES td;
    
    Socket s;
    BufferedReader reader;
    PrintWriter writer; 
    
    //reads incoming threads
    public void readIncoming()
    {
        Thread InReader = new Thread(new InputReader());
        InReader.start();
    }
    
    //adds user to the Arraylist
    public void addUser(String u)
    {
        userList.add(u);
    }
    
    //marks a user as offline
    public void offlineUser(String u)
    {
        msg_win.append(u + " is offline.\n");
    }
    
    //writes users to the array list
    public void writeUsers()
    {
        String[] temp = new String[userList.size()];
        userList.toArray(temp);
        
    }
    
    //Disconnects client from the server socket
    public void Disconnect()
    {
        try
        {
            msg_win.append("Disconnected.\n");
            s.close();
        }catch(Exception e){
            msg_win.append("Failure Disconnecting.\n");
        }
        connected = false;
        msg_user.setEditable(true);
    }
    /*
    public TripleDES TripleDesPass(String password) {
        return td.TripleDES(password);
    }*/
    
    //converts bytes to a hex string
    private static String bytesToHex(byte[] bytes) 
    { 
        StringBuffer result = new StringBuffer(); 
        for (byte b : bytes) 
           result.append(Integer.toString((b & 0xff) + 0x100, 16).substring(1)); 
        return result.toString(); 
    }
    
    //reads the incoming messages that the client sends and acts accordingly
    public class InputReader implements Runnable
    {
        @Override
        public void run()
        {
            String[] d;
            String stream, chat = "Chat", done = "Done",connect = "Connect", disconnect = "Disconnect";
            
            try{
                while((stream = reader.readLine()) != null)
                {
                    //when split by a : we read after this point
                    d = stream.split(":");
                    
                    //when :Chat appears we append to the chat window
                    if(d[2].equals(chat))
                    {   
                        //Possible place for decryption
                        //FIXME: need to find a better way to replace null with has connected
                        if(!d[1].equals(" has connected."))
                            d[1] = td.decrypt(d[1]);
                        //td = TripleDES("ThisisSpartaThisisSparta");
                        msg_win.append(d[0] + ": " + d[1] + "\n");
                        msg_win.setCaretPosition(msg_win.getDocument().getLength());
                    }
                    //when :Connect appears we add new user
                    else if (d[2].equals(connect))
                    {
                        msg_win.removeAll();
                        addUser(d[0]);
                    }
                    //when :Disconnect appears we mark the user offline
                    else if(d[2].equals(disconnect))
                    {
                        offlineUser(d[0]);
                    }
                    //when :Done appears we write the users to the array list and clear
                    else if(d[2].equals(done))
                    {
                        writeUsers();
                        userList.clear();
                    }
                }
            }catch(Exception e){
                
            }
        }
    }
    public client() {
        
        try {
            this.td = new TripleDES();
        } catch (Exception ex) {
            Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        msg_conn = new javax.swing.JButton();
        msg_dis = new javax.swing.JButton();
        msg_user = new javax.swing.JTextField();
        msg_pass = new javax.swing.JTextField();
        Username = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        msg_win = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        msg_in = new javax.swing.JTextField();
        msg_send = new javax.swing.JButton();
        msg_adr = new javax.swing.JTextField();
        Address = new javax.swing.JLabel();
        Password = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        msg_conn.setText("Connect");
        msg_conn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_connActionPerformed(evt);
            }
        });

        msg_dis.setText("Disconnect");
        msg_dis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_disActionPerformed(evt);
            }
        });

        msg_user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_userActionPerformed(evt);
            }
        });

        Username.setText("User:");

        msg_win.setColumns(20);
        msg_win.setRows(5);
        jScrollPane1.setViewportView(msg_win);

        jLabel3.setText("Client");

        msg_in.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_inActionPerformed(evt);
            }
        });

        msg_send.setText("Send");
        msg_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_sendActionPerformed(evt);
            }
        });

        msg_adr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_adrActionPerformed(evt);
            }
        });

        Address.setText("Address:");

        Password.setText("Password:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(msg_in)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(msg_send))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(msg_pass, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(msg_conn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Username, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Address))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(msg_user, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Password)
                                .addGap(191, 191, 191))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(msg_adr)
                                .addGap(24, 24, 24)
                                .addComponent(msg_dis)))))
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg_dis)
                    .addComponent(msg_adr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Address))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg_user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msg_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msg_conn)
                    .addComponent(Username)
                    .addComponent(Password))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg_in, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msg_send))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //actions that occur when connect button is pressed 
    private void msg_connActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_connActionPerformed
        //while not connected to the socket
        if(connected == false)
        {
            //get the username from the username field
            user = msg_user.getText();
            msg_user.setEditable(false);
            password = msg_pass.getText();
           
            /*if((user.length() < 1 || password == null))
            {
                while(true){
                msg_win.append("Username must be more than four characters and password field must be filled. Please try again. \n");
                msg_user.setEditable(true);
                msg_pass.setEditable(true);
                user = msg_user.getText();
                password = msg_pass.getText();
                if((user.length() >= 1) && (password != null)){
                    
                    msg_user.setEditable(false);
                    msg_pass.setEditable(false);
                    break;
                    
                }
                }
                
               }
        */
         try {
            //FIXME
            //creates message digest
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            md.update(password.getBytes());
            //uses message digest as key for encryption
             td.TripleDes(bytesToHex(md.digest()));
            } catch (Exception ex) {
                Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
            }
         
            /*try {
                //FIXME
                td.TripleDes(password);
            } catch (Exception ex) {
                Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            */
            
            //we connect to the server socket and mark the user as connected
            try{
                
                s = new Socket(msg_adr.getText(), port);
                InputStreamReader sReader = new InputStreamReader(s.getInputStream());
                reader = new BufferedReader(sReader);
                writer = new PrintWriter(s.getOutputStream());
                writer.println(user + ": has connected.:Connect");
                writer.flush();
                connected = true;
            }catch (Exception e){
                msg_win.append("Error connecting...\n");
                msg_user.setEditable(true);
            }
            readIncoming();
            
        }
        //if already connected we print a message
        else if (connected == true)
        {
            msg_win.append("Already connected.\n");
        }
        
        
    }//GEN-LAST:event_msg_connActionPerformed

    private void msg_inActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_inActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_msg_inActionPerformed

    //actions that occur when the disconnect button is pressed 
    private void msg_disActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_disActionPerformed
      
        //we show that the user has disconnected and call for appropriate actions
        String end = (user + ": :Disconnect");
        try
        {
            writer.println(end); 
            writer.flush(); 
        } catch (Exception e) 
        {}
        Disconnect();
    }//GEN-LAST:event_msg_disActionPerformed

    //actions that occur when the send button is pressed
    private void msg_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_sendActionPerformed
        
        //if the message input is blank we set the focus on the input until it is 
        //no longer blank
        String blank = "";
        if((msg_in.getText()).equals(blank))
        {
            msg_in.setText("");
            msg_in.requestFocus();
        }else {
            //we notice that the user is attempting to chat and we send the message
            try{
                //Attempt to send encrypted text
                String msg = msg_in.getText();
                msg = td.encrypt(msg);
                //writer.println(user + ":" + td.encrypt(msg_in.getText()) + ":" + "Chat");
                writer.println(user + ":" + msg + ":" + "Chat");
                
                writer.flush();
                
            }catch(Exception e)
            {
                msg_win.append("Message not sent.\n");
            }
            msg_in.setText("");
            msg_in.requestFocus();
        }
        
        msg_in.setText("");
        msg_in.requestFocus();
        
    }//GEN-LAST:event_msg_sendActionPerformed

    private void msg_adrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_adrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_msg_adrActionPerformed

    private void msg_userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_userActionPerformed
        // TODO add your handling code here:
         
        {
            
        }
    }//GEN-LAST:event_msg_userActionPerformed

    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new client().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Address;
    private javax.swing.JLabel Password;
    private javax.swing.JLabel Username;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField msg_adr;
    private javax.swing.JButton msg_conn;
    private javax.swing.JButton msg_dis;
    private javax.swing.JTextField msg_in;
    private javax.swing.JTextField msg_pass;
    private javax.swing.JButton msg_send;
    private javax.swing.JTextField msg_user;
    private javax.swing.JTextArea msg_win;
    // End of variables declaration//GEN-END:variables
}
