import java.io.*;
import java.net.*;
import java.util.*;

public class server extends javax.swing.JFrame {
    
    //initialization and declaration of variables used
    ArrayList clientOut;
    ArrayList<String> userList;
    Socket s; 
    
    //Client Processor that deals with reading the input of each client
    public class  procClient implements Runnable
    {
        BufferedReader reader;
        //Socket s;
        PrintWriter client;
        
        public procClient(Socket clientS, PrintWriter u)
        {
            client = u;
            try
            {
                s = clientS;
                InputStreamReader read = new InputStreamReader(s.getInputStream());
                reader = new BufferedReader(read);
            }catch(Exception e){
                msg_win.append("Error Occurred. \n");
            }
        }
        
        @Override
        
        //determines the type of message received from client and acts accordingly 
        public void run()
        {
            String msg, chat = "Chat", connect = "Connect", disconnect = "Disconnect";
            String[] d;
            
            try 
            {
                while((msg = reader.readLine()) != null)
                {
                    msg_win.append("Received: " + msg + "\n");
                    d = msg.split(":");
                    
                    for(String token:d)
                    {
                        msg_win.append(token + "\n");
                    }
                    
                    if(d[2].equals(connect))
                    {
                        dispWin((d[0]) + ":" + d[1] + ":" + chat);
                        addUser(d[0]);
                    }
                    else if(d[2].equals(disconnect))
                    {
                        dispWin((d[0] + ":has disconnected " + ":" + chat));
                        deleteUser(d[0]);
                    }
                    else if(d[2].equals(chat))
                    {
                        dispWin(msg);
                    }
                    else
                    {
                        msg_win.append("No action occurred.\n");
                    }
                                
                }          
            }catch(Exception e){
                msg_win.append("Connection lost. \n");
                e.printStackTrace();
                clientOut.remove(client);
            }
        }
    }
    
    public server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        msg_win = new javax.swing.JTextArea();
        msg_conn = new javax.swing.JButton();
        msg_dis = new javax.swing.JButton();
        msg_clear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Server");

        msg_win.setColumns(20);
        msg_win.setRows(5);
        jScrollPane1.setViewportView(msg_win);

        msg_conn.setText("Connect");
        msg_conn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_connActionPerformed(evt);
            }
        });

        msg_dis.setText("Disconnect");
        msg_dis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_disActionPerformed(evt);
            }
        });

        msg_clear.setText("Clear");
        msg_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(214, 214, 214)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(msg_conn)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(msg_dis, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(msg_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(192, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg_conn)
                    .addComponent(msg_dis))
                .addGap(18, 18, 18)
                .addComponent(msg_clear)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //actions that occur when the server disconnects
    private void msg_disActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_disActionPerformed
        try{
            Thread.sleep(5000);
        }catch(Exception e){
            Thread.currentThread().interrupt();
        }
        
        dispWin("Server is disconnecting, activity will be terminated. \n");
        msg_win.append("Server stopping...\n");
        try{
            msg_win.append("Server has disconnected from socket...\n");
            s.close();
        }catch(Exception e){
            msg_win.append("Server failed to disconnect; Error.\n");
        }
        msg_win.setText("");
    }//GEN-LAST:event_msg_disActionPerformed

    //actions that occur when the server connects/starts
    private void msg_connActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_connActionPerformed
        Thread begin = new Thread(new beginServer());
        begin.start();
        
        try{
         msg_win.append("Server Address: " + InetAddress.getLocalHost().getHostAddress() + "\n");
        }catch(Exception e){
            msg_win.append("Error getting server address.\n");
        }
        msg_win.append("Server started and waiting...\n");
    }//GEN-LAST:event_msg_connActionPerformed

    //actions that occur when the server clear button is pressed
    private void msg_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_clearActionPerformed
        msg_win.setText("");
    }//GEN-LAST:event_msg_clearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new server().setVisible(true);
            }
        });
    }
    
    //we start the server socket and continuously add client connections if they occur
    public class beginServer implements Runnable
    {
        @Override
        public void run()
        {
            clientOut = new ArrayList();
            userList = new ArrayList();
            //Initializes encryption 
            //TripleDES td = new TripleDES();
            
            try{
                ServerSocket serverS = new ServerSocket(2729);
                
                while(true)
                {
                    Socket clientS = serverS.accept();
                    PrintWriter writer = new PrintWriter(clientS.getOutputStream());
                    clientOut.add(writer);
                    
                    Thread incoming = new Thread(new procClient(clientS, writer));
                    incoming.start();
                    msg_win.append("Connection occurred. \n");
                }
            }catch(Exception e){
                msg_win.append("Connection error. \n");
            }
        }
    }
    
    //add clients to the Array List
    public void addUser(String u)
    {
        String msg, add = ": :Connect", done = "Server: :Done", name = u;
        userList.add(name);
        msg_win.append(name + " added successfully. \n");
        String[] temp = new String[userList.size()];
        userList.toArray(temp);
        
        for(String token:temp)
        {
            msg = (token + add);
            dispWin(msg);
        }
        dispWin(done);
       
        
       
    }
    
    //delete clients from the Array List
    public void deleteUser(String u)
    {
        String msg, add = ": :Connect", done = "Server: :Done", name = u;
        userList.remove(name);
        String[] temp = new String[userList.size()];
        userList.toArray(temp);
        
        for(String token:temp)
        {
            msg = (token + add);
            dispWin(msg);
        }
        dispWin(done);
    }
    
    //displays the chat messages/connections to each client window
    public void dispWin(String msg)
    {
        Iterator it = clientOut.iterator();
        
        while(it.hasNext())
        { 
            try{
                PrintWriter writer = (PrintWriter) it.next();
                writer.println(msg);
                msg_win.append("Sending: " + msg + "\n");
                writer.flush();
                msg_win.setCaretPosition(msg_win.getDocument().getLength());
            }catch(Exception e)
            {
                msg_win.append("Error displaying in all client windows. \n");
                        
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton msg_clear;
    private javax.swing.JButton msg_conn;
    private javax.swing.JButton msg_dis;
    private javax.swing.JTextArea msg_win;
    // End of variables declaration//GEN-END:variables
}
